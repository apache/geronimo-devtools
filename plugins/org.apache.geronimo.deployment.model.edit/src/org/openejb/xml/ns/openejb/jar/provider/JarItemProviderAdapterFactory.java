/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.openejb.xml.ns.openejb.jar.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.openejb.xml.ns.openejb.jar.util.JarAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JarItemProviderAdapterFactory extends JarAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final String copyright = "";

  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection supportedTypes = new ArrayList();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JarItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);		
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.ActivationConfigPropertyType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivationConfigPropertyTypeItemProvider activationConfigPropertyTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.ActivationConfigPropertyType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createActivationConfigPropertyTypeAdapter()
  {
    if (activationConfigPropertyTypeItemProvider == null)
    {
      activationConfigPropertyTypeItemProvider = new ActivationConfigPropertyTypeItemProvider(this);
    }

    return activationConfigPropertyTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.ActivationConfigType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActivationConfigTypeItemProvider activationConfigTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.ActivationConfigType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createActivationConfigTypeAdapter()
  {
    if (activationConfigTypeItemProvider == null)
    {
      activationConfigTypeItemProvider = new ActivationConfigTypeItemProvider(this);
    }

    return activationConfigTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.CacheType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CacheTypeItemProvider cacheTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.CacheType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createCacheTypeAdapter()
  {
    if (cacheTypeItemProvider == null)
    {
      cacheTypeItemProvider = new CacheTypeItemProvider(this);
    }

    return cacheTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.CmpFieldGroupMappingType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CmpFieldGroupMappingTypeItemProvider cmpFieldGroupMappingTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.CmpFieldGroupMappingType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createCmpFieldGroupMappingTypeAdapter()
  {
    if (cmpFieldGroupMappingTypeItemProvider == null)
    {
      cmpFieldGroupMappingTypeItemProvider = new CmpFieldGroupMappingTypeItemProvider(this);
    }

    return cmpFieldGroupMappingTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.CmpFieldMappingType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CmpFieldMappingTypeItemProvider cmpFieldMappingTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.CmpFieldMappingType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createCmpFieldMappingTypeAdapter()
  {
    if (cmpFieldMappingTypeItemProvider == null)
    {
      cmpFieldMappingTypeItemProvider = new CmpFieldMappingTypeItemProvider(this);
    }

    return cmpFieldMappingTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.CmrFieldGroupMappingType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CmrFieldGroupMappingTypeItemProvider cmrFieldGroupMappingTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.CmrFieldGroupMappingType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createCmrFieldGroupMappingTypeAdapter()
  {
    if (cmrFieldGroupMappingTypeItemProvider == null)
    {
      cmrFieldGroupMappingTypeItemProvider = new CmrFieldGroupMappingTypeItemProvider(this);
    }

    return cmrFieldGroupMappingTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.CmrFieldMappingType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CmrFieldMappingTypeItemProvider cmrFieldMappingTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.CmrFieldMappingType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createCmrFieldMappingTypeAdapter()
  {
    if (cmrFieldMappingTypeItemProvider == null)
    {
      cmrFieldMappingTypeItemProvider = new CmrFieldMappingTypeItemProvider(this);
    }

    return cmrFieldMappingTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.CmrFieldType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CmrFieldTypeItemProvider cmrFieldTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.CmrFieldType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createCmrFieldTypeAdapter()
  {
    if (cmrFieldTypeItemProvider == null)
    {
      cmrFieldTypeItemProvider = new CmrFieldTypeItemProvider(this);
    }

    return cmrFieldTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.CmrFieldType1} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CmrFieldType1ItemProvider cmrFieldType1ItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.CmrFieldType1}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createCmrFieldType1Adapter()
  {
    if (cmrFieldType1ItemProvider == null)
    {
      cmrFieldType1ItemProvider = new CmrFieldType1ItemProvider(this);
    }

    return cmrFieldType1ItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.DocumentRoot} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DocumentRootItemProvider documentRootItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.DocumentRoot}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createDocumentRootAdapter()
  {
    if (documentRootItemProvider == null)
    {
      documentRootItemProvider = new DocumentRootItemProvider(this);
    }

    return documentRootItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.EjbRelationshipRoleType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EjbRelationshipRoleTypeItemProvider ejbRelationshipRoleTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.EjbRelationshipRoleType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createEjbRelationshipRoleTypeAdapter()
  {
    if (ejbRelationshipRoleTypeItemProvider == null)
    {
      ejbRelationshipRoleTypeItemProvider = new EjbRelationshipRoleTypeItemProvider(this);
    }

    return ejbRelationshipRoleTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.EjbRelationType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EjbRelationTypeItemProvider ejbRelationTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.EjbRelationType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createEjbRelationTypeAdapter()
  {
    if (ejbRelationTypeItemProvider == null)
    {
      ejbRelationTypeItemProvider = new EjbRelationTypeItemProvider(this);
    }

    return ejbRelationTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.EmptyType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EmptyTypeItemProvider emptyTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.EmptyType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createEmptyTypeAdapter()
  {
    if (emptyTypeItemProvider == null)
    {
      emptyTypeItemProvider = new EmptyTypeItemProvider(this);
    }

    return emptyTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.EnterpriseBeansType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnterpriseBeansTypeItemProvider enterpriseBeansTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.EnterpriseBeansType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createEnterpriseBeansTypeAdapter()
  {
    if (enterpriseBeansTypeItemProvider == null)
    {
      enterpriseBeansTypeItemProvider = new EnterpriseBeansTypeItemProvider(this);
    }

    return enterpriseBeansTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.EntityBeanType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityBeanTypeItemProvider entityBeanTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.EntityBeanType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createEntityBeanTypeAdapter()
  {
    if (entityBeanTypeItemProvider == null)
    {
      entityBeanTypeItemProvider = new EntityBeanTypeItemProvider(this);
    }

    return entityBeanTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.EntityGroupMappingType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityGroupMappingTypeItemProvider entityGroupMappingTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.EntityGroupMappingType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createEntityGroupMappingTypeAdapter()
  {
    if (entityGroupMappingTypeItemProvider == null)
    {
      entityGroupMappingTypeItemProvider = new EntityGroupMappingTypeItemProvider(this);
    }

    return entityGroupMappingTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.GroupType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GroupTypeItemProvider groupTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.GroupType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createGroupTypeAdapter()
  {
    if (groupTypeItemProvider == null)
    {
      groupTypeItemProvider = new GroupTypeItemProvider(this);
    }

    return groupTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.MessageDrivenBeanType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MessageDrivenBeanTypeItemProvider messageDrivenBeanTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.MessageDrivenBeanType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createMessageDrivenBeanTypeAdapter()
  {
    if (messageDrivenBeanTypeItemProvider == null)
    {
      messageDrivenBeanTypeItemProvider = new MessageDrivenBeanTypeItemProvider(this);
    }

    return messageDrivenBeanTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.MethodParamsType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodParamsTypeItemProvider methodParamsTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.MethodParamsType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createMethodParamsTypeAdapter()
  {
    if (methodParamsTypeItemProvider == null)
    {
      methodParamsTypeItemProvider = new MethodParamsTypeItemProvider(this);
    }

    return methodParamsTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.OpenejbJarType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OpenejbJarTypeItemProvider openejbJarTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.OpenejbJarType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createOpenejbJarTypeAdapter()
  {
    if (openejbJarTypeItemProvider == null)
    {
      openejbJarTypeItemProvider = new OpenejbJarTypeItemProvider(this);
    }

    return openejbJarTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.PrefetchGroupType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PrefetchGroupTypeItemProvider prefetchGroupTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.PrefetchGroupType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createPrefetchGroupTypeAdapter()
  {
    if (prefetchGroupTypeItemProvider == null)
    {
      prefetchGroupTypeItemProvider = new PrefetchGroupTypeItemProvider(this);
    }

    return prefetchGroupTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.QueryMethodType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryMethodTypeItemProvider queryMethodTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.QueryMethodType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createQueryMethodTypeAdapter()
  {
    if (queryMethodTypeItemProvider == null)
    {
      queryMethodTypeItemProvider = new QueryMethodTypeItemProvider(this);
    }

    return queryMethodTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.QueryType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QueryTypeItemProvider queryTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.QueryType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createQueryTypeAdapter()
  {
    if (queryTypeItemProvider == null)
    {
      queryTypeItemProvider = new QueryTypeItemProvider(this);
    }

    return queryTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.RelationshipRoleSourceType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationshipRoleSourceTypeItemProvider relationshipRoleSourceTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.RelationshipRoleSourceType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createRelationshipRoleSourceTypeAdapter()
  {
    if (relationshipRoleSourceTypeItemProvider == null)
    {
      relationshipRoleSourceTypeItemProvider = new RelationshipRoleSourceTypeItemProvider(this);
    }

    return relationshipRoleSourceTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.RelationshipsType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RelationshipsTypeItemProvider relationshipsTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.RelationshipsType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createRelationshipsTypeAdapter()
  {
    if (relationshipsTypeItemProvider == null)
    {
      relationshipsTypeItemProvider = new RelationshipsTypeItemProvider(this);
    }

    return relationshipsTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.RoleMappingType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RoleMappingTypeItemProvider roleMappingTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.RoleMappingType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createRoleMappingTypeAdapter()
  {
    if (roleMappingTypeItemProvider == null)
    {
      roleMappingTypeItemProvider = new RoleMappingTypeItemProvider(this);
    }

    return roleMappingTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.SessionBeanType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SessionBeanTypeItemProvider sessionBeanTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.SessionBeanType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createSessionBeanTypeAdapter()
  {
    if (sessionBeanTypeItemProvider == null)
    {
      sessionBeanTypeItemProvider = new SessionBeanTypeItemProvider(this);
    }

    return sessionBeanTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.TssType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TssTypeItemProvider tssTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.TssType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createTssTypeAdapter()
  {
    if (tssTypeItemProvider == null)
    {
      tssTypeItemProvider = new TssTypeItemProvider(this);
    }

    return tssTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.openejb.jar.WebServiceSecurityType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WebServiceSecurityTypeItemProvider webServiceSecurityTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.openejb.jar.WebServiceSecurityType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createWebServiceSecurityTypeAdapter()
  {
    if (webServiceSecurityTypeItemProvider == null)
    {
      webServiceSecurityTypeItemProvider = new WebServiceSecurityTypeItemProvider(this);
    }

    return webServiceSecurityTypeItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class) || (((Class)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (activationConfigPropertyTypeItemProvider != null) activationConfigPropertyTypeItemProvider.dispose();
    if (activationConfigTypeItemProvider != null) activationConfigTypeItemProvider.dispose();
    if (cacheTypeItemProvider != null) cacheTypeItemProvider.dispose();
    if (cmpFieldGroupMappingTypeItemProvider != null) cmpFieldGroupMappingTypeItemProvider.dispose();
    if (cmpFieldMappingTypeItemProvider != null) cmpFieldMappingTypeItemProvider.dispose();
    if (cmrFieldGroupMappingTypeItemProvider != null) cmrFieldGroupMappingTypeItemProvider.dispose();
    if (cmrFieldMappingTypeItemProvider != null) cmrFieldMappingTypeItemProvider.dispose();
    if (cmrFieldTypeItemProvider != null) cmrFieldTypeItemProvider.dispose();
    if (cmrFieldType1ItemProvider != null) cmrFieldType1ItemProvider.dispose();
    if (documentRootItemProvider != null) documentRootItemProvider.dispose();
    if (ejbRelationshipRoleTypeItemProvider != null) ejbRelationshipRoleTypeItemProvider.dispose();
    if (ejbRelationTypeItemProvider != null) ejbRelationTypeItemProvider.dispose();
    if (emptyTypeItemProvider != null) emptyTypeItemProvider.dispose();
    if (enterpriseBeansTypeItemProvider != null) enterpriseBeansTypeItemProvider.dispose();
    if (entityBeanTypeItemProvider != null) entityBeanTypeItemProvider.dispose();
    if (entityGroupMappingTypeItemProvider != null) entityGroupMappingTypeItemProvider.dispose();
    if (groupTypeItemProvider != null) groupTypeItemProvider.dispose();
    if (messageDrivenBeanTypeItemProvider != null) messageDrivenBeanTypeItemProvider.dispose();
    if (methodParamsTypeItemProvider != null) methodParamsTypeItemProvider.dispose();
    if (openejbJarTypeItemProvider != null) openejbJarTypeItemProvider.dispose();
    if (prefetchGroupTypeItemProvider != null) prefetchGroupTypeItemProvider.dispose();
    if (queryMethodTypeItemProvider != null) queryMethodTypeItemProvider.dispose();
    if (queryTypeItemProvider != null) queryTypeItemProvider.dispose();
    if (relationshipRoleSourceTypeItemProvider != null) relationshipRoleSourceTypeItemProvider.dispose();
    if (relationshipsTypeItemProvider != null) relationshipsTypeItemProvider.dispose();
    if (roleMappingTypeItemProvider != null) roleMappingTypeItemProvider.dispose();
    if (sessionBeanTypeItemProvider != null) sessionBeanTypeItemProvider.dispose();
    if (tssTypeItemProvider != null) tssTypeItemProvider.dispose();
    if (webServiceSecurityTypeItemProvider != null) webServiceSecurityTypeItemProvider.dispose();
  }

}

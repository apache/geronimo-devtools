/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.openejb.xml.ns.pkgen.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.openejb.xml.ns.pkgen.util.PkgenAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PkgenItemProviderAdapterFactory extends PkgenAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final String copyright = "";

  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection supportedTypes = new ArrayList();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PkgenItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);		
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.pkgen.AutoIncrementTableType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AutoIncrementTableTypeItemProvider autoIncrementTableTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.pkgen.AutoIncrementTableType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createAutoIncrementTableTypeAdapter()
  {
    if (autoIncrementTableTypeItemProvider == null)
    {
      autoIncrementTableTypeItemProvider = new AutoIncrementTableTypeItemProvider(this);
    }

    return autoIncrementTableTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.pkgen.CustomGeneratorType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CustomGeneratorTypeItemProvider customGeneratorTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.pkgen.CustomGeneratorType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createCustomGeneratorTypeAdapter()
  {
    if (customGeneratorTypeItemProvider == null)
    {
      customGeneratorTypeItemProvider = new CustomGeneratorTypeItemProvider(this);
    }

    return customGeneratorTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.pkgen.DatabaseGeneratedType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatabaseGeneratedTypeItemProvider databaseGeneratedTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.pkgen.DatabaseGeneratedType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createDatabaseGeneratedTypeAdapter()
  {
    if (databaseGeneratedTypeItemProvider == null)
    {
      databaseGeneratedTypeItemProvider = new DatabaseGeneratedTypeItemProvider(this);
    }

    return databaseGeneratedTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.pkgen.DocumentRoot} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DocumentRootItemProvider documentRootItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.pkgen.DocumentRoot}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createDocumentRootAdapter()
  {
    if (documentRootItemProvider == null)
    {
      documentRootItemProvider = new DocumentRootItemProvider(this);
    }

    return documentRootItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.pkgen.KeyGeneratorType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected KeyGeneratorTypeItemProvider keyGeneratorTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.pkgen.KeyGeneratorType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createKeyGeneratorTypeAdapter()
  {
    if (keyGeneratorTypeItemProvider == null)
    {
      keyGeneratorTypeItemProvider = new KeyGeneratorTypeItemProvider(this);
    }

    return keyGeneratorTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.pkgen.SequenceTableType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SequenceTableTypeItemProvider sequenceTableTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.pkgen.SequenceTableType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createSequenceTableTypeAdapter()
  {
    if (sequenceTableTypeItemProvider == null)
    {
      sequenceTableTypeItemProvider = new SequenceTableTypeItemProvider(this);
    }

    return sequenceTableTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.openejb.xml.ns.pkgen.SqlGeneratorType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SqlGeneratorTypeItemProvider sqlGeneratorTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.openejb.xml.ns.pkgen.SqlGeneratorType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createSqlGeneratorTypeAdapter()
  {
    if (sqlGeneratorTypeItemProvider == null)
    {
      sqlGeneratorTypeItemProvider = new SqlGeneratorTypeItemProvider(this);
    }

    return sqlGeneratorTypeItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class) || (((Class)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (autoIncrementTableTypeItemProvider != null) autoIncrementTableTypeItemProvider.dispose();
    if (customGeneratorTypeItemProvider != null) customGeneratorTypeItemProvider.dispose();
    if (databaseGeneratedTypeItemProvider != null) databaseGeneratedTypeItemProvider.dispose();
    if (documentRootItemProvider != null) documentRootItemProvider.dispose();
    if (keyGeneratorTypeItemProvider != null) keyGeneratorTypeItemProvider.dispose();
    if (sequenceTableTypeItemProvider != null) sequenceTableTypeItemProvider.dispose();
    if (sqlGeneratorTypeItemProvider != null) sqlGeneratorTypeItemProvider.dispose();
  }

}

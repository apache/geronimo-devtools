/**
 * Copyright 2004, 2005 The Apache Software Foundation or its licensors, as applicable
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package org.apache.geronimo.xml.ns.security.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.geronimo.xml.ns.security.util.SecurityAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SecurityItemProviderAdapterFactory extends SecurityAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final String copyright = "";

  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection supportedTypes = new ArrayList();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated NOT
   */
  public SecurityItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);		
    supportedTypes.add(ITableItemLabelProvider.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.DefaultPrincipalType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DefaultPrincipalTypeItemProvider defaultPrincipalTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.DefaultPrincipalType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createDefaultPrincipalTypeAdapter()
  {
    if (defaultPrincipalTypeItemProvider == null)
    {
      defaultPrincipalTypeItemProvider = new DefaultPrincipalTypeItemProvider(this);
    }

    return defaultPrincipalTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.DescriptionType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DescriptionTypeItemProvider descriptionTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.DescriptionType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createDescriptionTypeAdapter()
  {
    if (descriptionTypeItemProvider == null)
    {
      descriptionTypeItemProvider = new DescriptionTypeItemProvider(this);
    }

    return descriptionTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.DistinguishedNameType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DistinguishedNameTypeItemProvider distinguishedNameTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.DistinguishedNameType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createDistinguishedNameTypeAdapter()
  {
    if (distinguishedNameTypeItemProvider == null)
    {
      distinguishedNameTypeItemProvider = new DistinguishedNameTypeItemProvider(this);
    }

    return distinguishedNameTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.DocumentRoot} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DocumentRootItemProvider documentRootItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.DocumentRoot}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createDocumentRootAdapter()
  {
    if (documentRootItemProvider == null)
    {
      documentRootItemProvider = new DocumentRootItemProvider(this);
    }

    return documentRootItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.LoginDomainPrincipalType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LoginDomainPrincipalTypeItemProvider loginDomainPrincipalTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.LoginDomainPrincipalType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createLoginDomainPrincipalTypeAdapter()
  {
    if (loginDomainPrincipalTypeItemProvider == null)
    {
      loginDomainPrincipalTypeItemProvider = new LoginDomainPrincipalTypeItemProvider(this);
    }

    return loginDomainPrincipalTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.NamedUsernamePasswordCredentialType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NamedUsernamePasswordCredentialTypeItemProvider namedUsernamePasswordCredentialTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.NamedUsernamePasswordCredentialType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createNamedUsernamePasswordCredentialTypeAdapter()
  {
    if (namedUsernamePasswordCredentialTypeItemProvider == null)
    {
      namedUsernamePasswordCredentialTypeItemProvider = new NamedUsernamePasswordCredentialTypeItemProvider(this);
    }

    return namedUsernamePasswordCredentialTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.PrincipalType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PrincipalTypeItemProvider principalTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.PrincipalType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createPrincipalTypeAdapter()
  {
    if (principalTypeItemProvider == null)
    {
      principalTypeItemProvider = new PrincipalTypeItemProvider(this);
    }

    return principalTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.RealmPrincipalType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RealmPrincipalTypeItemProvider realmPrincipalTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.RealmPrincipalType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createRealmPrincipalTypeAdapter()
  {
    if (realmPrincipalTypeItemProvider == null)
    {
      realmPrincipalTypeItemProvider = new RealmPrincipalTypeItemProvider(this);
    }

    return realmPrincipalTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.RoleMappingsType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RoleMappingsTypeItemProvider roleMappingsTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.RoleMappingsType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createRoleMappingsTypeAdapter()
  {
    if (roleMappingsTypeItemProvider == null)
    {
      roleMappingsTypeItemProvider = new RoleMappingsTypeItemProvider(this);
    }

    return roleMappingsTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.RoleType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RoleTypeItemProvider roleTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.RoleType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createRoleTypeAdapter()
  {
    if (roleTypeItemProvider == null)
    {
      roleTypeItemProvider = new RoleTypeItemProvider(this);
    }

    return roleTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.security.SecurityType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SecurityTypeItemProvider securityTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.security.SecurityType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createSecurityTypeAdapter()
  {
    if (securityTypeItemProvider == null)
    {
      securityTypeItemProvider = new SecurityTypeItemProvider(this);
    }

    return securityTypeItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class) || (((Class)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (defaultPrincipalTypeItemProvider != null) defaultPrincipalTypeItemProvider.dispose();
    if (descriptionTypeItemProvider != null) descriptionTypeItemProvider.dispose();
    if (distinguishedNameTypeItemProvider != null) distinguishedNameTypeItemProvider.dispose();
    if (documentRootItemProvider != null) documentRootItemProvider.dispose();
    if (loginDomainPrincipalTypeItemProvider != null) loginDomainPrincipalTypeItemProvider.dispose();
    if (namedUsernamePasswordCredentialTypeItemProvider != null) namedUsernamePasswordCredentialTypeItemProvider.dispose();
    if (principalTypeItemProvider != null) principalTypeItemProvider.dispose();
    if (realmPrincipalTypeItemProvider != null) realmPrincipalTypeItemProvider.dispose();
    if (roleMappingsTypeItemProvider != null) roleMappingsTypeItemProvider.dispose();
    if (roleTypeItemProvider != null) roleTypeItemProvider.dispose();
    if (securityTypeItemProvider != null) securityTypeItemProvider.dispose();
  }

}

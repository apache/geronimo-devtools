/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.apache.geronimo.xml.ns.j2ee.connector.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.geronimo.xml.ns.j2ee.connector.util.ConnectorAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ConnectorItemProviderAdapterFactory extends ConnectorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final String copyright = "";

  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection supportedTypes = new ArrayList();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConnectorItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);		
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.AdminobjectInstanceType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AdminobjectInstanceTypeItemProvider adminobjectInstanceTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.AdminobjectInstanceType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createAdminobjectInstanceTypeAdapter()
  {
    if (adminobjectInstanceTypeItemProvider == null)
    {
      adminobjectInstanceTypeItemProvider = new AdminobjectInstanceTypeItemProvider(this);
    }

    return adminobjectInstanceTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.AdminobjectType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AdminobjectTypeItemProvider adminobjectTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.AdminobjectType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createAdminobjectTypeAdapter()
  {
    if (adminobjectTypeItemProvider == null)
    {
      adminobjectTypeItemProvider = new AdminobjectTypeItemProvider(this);
    }

    return adminobjectTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.ConfigPropertySettingType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigPropertySettingTypeItemProvider configPropertySettingTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.ConfigPropertySettingType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createConfigPropertySettingTypeAdapter()
  {
    if (configPropertySettingTypeItemProvider == null)
    {
      configPropertySettingTypeItemProvider = new ConfigPropertySettingTypeItemProvider(this);
    }

    return configPropertySettingTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.ConnectiondefinitionInstanceType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectiondefinitionInstanceTypeItemProvider connectiondefinitionInstanceTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.ConnectiondefinitionInstanceType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createConnectiondefinitionInstanceTypeAdapter()
  {
    if (connectiondefinitionInstanceTypeItemProvider == null)
    {
      connectiondefinitionInstanceTypeItemProvider = new ConnectiondefinitionInstanceTypeItemProvider(this);
    }

    return connectiondefinitionInstanceTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.ConnectionDefinitionType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectionDefinitionTypeItemProvider connectionDefinitionTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.ConnectionDefinitionType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createConnectionDefinitionTypeAdapter()
  {
    if (connectionDefinitionTypeItemProvider == null)
    {
      connectionDefinitionTypeItemProvider = new ConnectionDefinitionTypeItemProvider(this);
    }

    return connectionDefinitionTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.ConnectionmanagerType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectionmanagerTypeItemProvider connectionmanagerTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.ConnectionmanagerType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createConnectionmanagerTypeAdapter()
  {
    if (connectionmanagerTypeItemProvider == null)
    {
      connectionmanagerTypeItemProvider = new ConnectionmanagerTypeItemProvider(this);
    }

    return connectionmanagerTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.ConnectorType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectorTypeItemProvider connectorTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.ConnectorType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createConnectorTypeAdapter()
  {
    if (connectorTypeItemProvider == null)
    {
      connectorTypeItemProvider = new ConnectorTypeItemProvider(this);
    }

    return connectorTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.DescriptionType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DescriptionTypeItemProvider descriptionTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.DescriptionType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createDescriptionTypeAdapter()
  {
    if (descriptionTypeItemProvider == null)
    {
      descriptionTypeItemProvider = new DescriptionTypeItemProvider(this);
    }

    return descriptionTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.DocumentRoot} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DocumentRootItemProvider documentRootItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.DocumentRoot}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createDocumentRootAdapter()
  {
    if (documentRootItemProvider == null)
    {
      documentRootItemProvider = new DocumentRootItemProvider(this);
    }

    return documentRootItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.EmptyType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EmptyTypeItemProvider emptyTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.EmptyType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createEmptyTypeAdapter()
  {
    if (emptyTypeItemProvider == null)
    {
      emptyTypeItemProvider = new EmptyTypeItemProvider(this);
    }

    return emptyTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.OutboundResourceadapterType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OutboundResourceadapterTypeItemProvider outboundResourceadapterTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.OutboundResourceadapterType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createOutboundResourceadapterTypeAdapter()
  {
    if (outboundResourceadapterTypeItemProvider == null)
    {
      outboundResourceadapterTypeItemProvider = new OutboundResourceadapterTypeItemProvider(this);
    }

    return outboundResourceadapterTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.PartitionedpoolType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PartitionedpoolTypeItemProvider partitionedpoolTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.PartitionedpoolType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createPartitionedpoolTypeAdapter()
  {
    if (partitionedpoolTypeItemProvider == null)
    {
      partitionedpoolTypeItemProvider = new PartitionedpoolTypeItemProvider(this);
    }

    return partitionedpoolTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.ResourceadapterInstanceType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResourceadapterInstanceTypeItemProvider resourceadapterInstanceTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.ResourceadapterInstanceType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createResourceadapterInstanceTypeAdapter()
  {
    if (resourceadapterInstanceTypeItemProvider == null)
    {
      resourceadapterInstanceTypeItemProvider = new ResourceadapterInstanceTypeItemProvider(this);
    }

    return resourceadapterInstanceTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.ResourceadapterType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ResourceadapterTypeItemProvider resourceadapterTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.ResourceadapterType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createResourceadapterTypeAdapter()
  {
    if (resourceadapterTypeItemProvider == null)
    {
      resourceadapterTypeItemProvider = new ResourceadapterTypeItemProvider(this);
    }

    return resourceadapterTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.SinglepoolType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SinglepoolTypeItemProvider singlepoolTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.SinglepoolType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createSinglepoolTypeAdapter()
  {
    if (singlepoolTypeItemProvider == null)
    {
      singlepoolTypeItemProvider = new SinglepoolTypeItemProvider(this);
    }

    return singlepoolTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.apache.geronimo.xml.ns.j2ee.connector.XatransactionType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XatransactionTypeItemProvider xatransactionTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.apache.geronimo.xml.ns.j2ee.connector.XatransactionType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createXatransactionTypeAdapter()
  {
    if (xatransactionTypeItemProvider == null)
    {
      xatransactionTypeItemProvider = new XatransactionTypeItemProvider(this);
    }

    return xatransactionTypeItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class) || (((Class)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (adminobjectInstanceTypeItemProvider != null) adminobjectInstanceTypeItemProvider.dispose();
    if (adminobjectTypeItemProvider != null) adminobjectTypeItemProvider.dispose();
    if (configPropertySettingTypeItemProvider != null) configPropertySettingTypeItemProvider.dispose();
    if (connectiondefinitionInstanceTypeItemProvider != null) connectiondefinitionInstanceTypeItemProvider.dispose();
    if (connectionDefinitionTypeItemProvider != null) connectionDefinitionTypeItemProvider.dispose();
    if (connectionmanagerTypeItemProvider != null) connectionmanagerTypeItemProvider.dispose();
    if (connectorTypeItemProvider != null) connectorTypeItemProvider.dispose();
    if (descriptionTypeItemProvider != null) descriptionTypeItemProvider.dispose();
    if (documentRootItemProvider != null) documentRootItemProvider.dispose();
    if (emptyTypeItemProvider != null) emptyTypeItemProvider.dispose();
    if (outboundResourceadapterTypeItemProvider != null) outboundResourceadapterTypeItemProvider.dispose();
    if (partitionedpoolTypeItemProvider != null) partitionedpoolTypeItemProvider.dispose();
    if (resourceadapterInstanceTypeItemProvider != null) resourceadapterInstanceTypeItemProvider.dispose();
    if (resourceadapterTypeItemProvider != null) resourceadapterTypeItemProvider.dispose();
    if (singlepoolTypeItemProvider != null) singlepoolTypeItemProvider.dispose();
    if (xatransactionTypeItemProvider != null) xatransactionTypeItemProvider.dispose();
  }

}
